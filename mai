import 'package:flutter/material.dart';

void main() {
  runApp(QuizApp());
}

class QuizApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      title: 'Flutter Quiz App',
      debugShowCheckedModeBanner: false, // Remove debug banner
      theme: ThemeData(
        primaryColor: Colors.indigo,
        fontFamily: 'Roboto',
      ),
      home: QuizPage(),
    );
  }
}

class QuizPage extends StatefulWidget {
  @override
  _QuizPageState createState() => _QuizPageState();
}

class _QuizPageState extends State<QuizPage> {
  int _questionIndex = 0;
  List<String> _questions = [
    'What is the primary programming language used in Flutter development?',
    'What is the widget used to display a list of items in Flutter?',
    'What Flutter command is used to run your app in debug mode?',
    'What widget is used to add padding around other widgets in Flutter?',
    'What command is used to create a new Flutter project from the command line?',
  ];
  List<List<String>> _answers = [
    ['Dart', 'Java', 'Python', 'C++'],
    ['ListView', 'GridView', 'Column', 'Row'],
    ['flutter run', 'flutter start', 'flutter debug', 'flutter build'],
    ['Padding', 'Container', 'Scaffold', 'Wrap'],
    ['flutter create', 'flutter init', 'flutter start', 'flutter new'],
  ];
  List<int> _correctAnswers = [0, 0, 0, 0, 0];
  List<bool> _answerResults = [];

  void _answerQuestion(int selectedIndex) {
    bool isCorrect = selectedIndex == _correctAnswers[_questionIndex];
    setState(() {
      _answerResults.add(isCorrect);
      _questionIndex++;
    });
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: Text('Flutter Quiz App'),
        centerTitle: true,
      ),
      body: Center(
        child: Padding(
          padding: const EdgeInsets.all(16.0),
          child: _questionIndex < _questions.length
              ? QuizQuestion(
                  question: _questions[_questionIndex],
                  answers: _answers[_questionIndex],
                  answerQuestion: _answerQuestion,
                )
              : QuizResult(answerResults: _answerResults),
        ),
      ),
    );
  }
}

class QuizQuestion extends StatelessWidget {
  final String question;
  final List<String> answers;
  final Function(int) answerQuestion;

  QuizQuestion({
    required this.question,
    required this.answers,
    required this.answerQuestion,
  });

  @override
  Widget build(BuildContext context) {
    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      crossAxisAlignment: CrossAxisAlignment.stretch,
      children: [
        Text(
          question,
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
          textAlign: TextAlign.center,
        ),
        SizedBox(height: 20),
        ...answers.asMap().entries.map((entry) {
          int index = entry.key;
          String answer = entry.value;
          return Padding(
            padding: const EdgeInsets.symmetric(vertical: 8.0),
            child: ElevatedButton(
              onPressed: () => answerQuestion(index),
              child: Text(
                answer,
                style: TextStyle(fontSize: 20, color: Colors.white), // Change text color to white
              ),
              style: ButtonStyle(
                backgroundColor: MaterialStateProperty.all<Color>(Colors.indigo),
                padding: MaterialStateProperty.all<EdgeInsetsGeometry>(EdgeInsets.all(16)),
                shape: MaterialStateProperty.all<OutlinedBorder>(
                  RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(10),
                  ),
                ),
              ),
            ),
          );
        }).toList(),
      ],
    );
  }
}

class QuizResult extends StatelessWidget {
  final List<bool> answerResults;

  QuizResult({required this.answerResults});

  @override
  Widget build(BuildContext context) {
    int correctCount = answerResults.where((result) => result).length;
    String performanceText = correctCount > 3 ? 'Good Performance' : 'Bad Performance';

    return Column(
      mainAxisAlignment: MainAxisAlignment.center,
      children: [
        Text(
          'Quiz Completed!',
          style: TextStyle(fontSize: 24, fontWeight: FontWeight.bold),
        ),
        SizedBox(height: 20),
        Text(
          'You got $correctCount out of ${answerResults.length} questions correct!',
          style: TextStyle(fontSize: 20),
          textAlign: TextAlign.center,
        ),
        SizedBox(height: 20),
        Text(
          performanceText,
          style: TextStyle(fontSize: 20, color: correctCount > 3 ? Colors.green : Colors.red),
          textAlign: TextAlign.center,
        ),
        SizedBox(height: 20),
        ElevatedButton(
          onPressed: () {
            Navigator.pop(context);
          },
          child: Text('Restart Quiz'),
          style: ButtonStyle(
            backgroundColor: MaterialStateProperty.all<Color>(Colors.amber),
            padding: MaterialStateProperty.all<EdgeInsetsGeometry>(EdgeInsets.all(16)),
            shape: MaterialStateProperty.all<OutlinedBorder>(
              RoundedRectangleBorder(
                borderRadius: BorderRadius.circular(10),
              ),
            ),
          ),
        ),
      ],
    );
  }
}